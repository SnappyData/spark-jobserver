/*
 * Copyright (c) 2016 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

apply plugin: 'scala'

version = '0.6.3-3'

ext {
  nettyGroup = 'io.netty'
  scalaMacros = 'org.scalamacros'
  scalaTest = 'org.scalatest'
}

scalaStyle {
  configLocation = "${projectDir}/scalastyle-config.xml"
  inputEncoding = 'UTF-8'
  outputEncoding = 'UTF-8'
  outputFile = "${buildDir}/scalastyle-output.xml"
  includeTestSourceDirectory = false
  source = 'src/main/scala'
  testSource = 'src/test/scala'
  failOnViolation = true
  failOnWarning = false
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.additionalParameters = [ '-deprecation', '-feature', '-language:postfixOps', '-language:implicitConversions' ]
}
tasks.withType(ScalaDoc) {
  scalaDocOptions.additionalParameters = [ '-deprecation', '-feature', '-language:postfixOps', '-language:implicitConversions' ]
}

def isJDK8 = scala.util.Properties.isJavaAtLeast('1.8')

dependencies {
  compile 'org.scala-lang:scala-library:' + scalaVersion
  compile 'org.scala-lang:scala-reflect:' + scalaVersion
  compile 'org.scala-lang:scala-compiler:' + scalaVersion

  compile 'org.slf4j:slf4j-api:' + slf4jVersion
  compile 'org.slf4j:slf4j-log4j12:' + slf4jVersion
  compile 'org.slf4j:jcl-over-slf4j:' + slf4jVersion
  compile 'org.slf4j:jul-to-slf4j:' + slf4jVersion

  // always use stock spark so that snappy extensions don't get accidently
  // included here in jobserver code.
  provided("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  provided("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  provided("org.apache.spark:spark-mllib_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  provided("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  provided("org.apache.spark:spark-hive_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: scalaTest)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }

  // akka-appDeps
  compile "com.typesafe.akka:akka-slf4j_${scalaBinaryVersion}:2.3.15"
  compile("com.typesafe.akka:akka-cluster_${scalaBinaryVersion}:2.3.15") {
    exclude(group: 'com.typesafe.akka', module: 'akka-remote')
  }
  compile "io.spray:spray-json_${scalaBinaryVersion}:1.3.2"
  compile "io.spray:spray-can_${scalaBinaryVersion}:1.3.3"
  compile "io.spray:spray-caching_${scalaBinaryVersion}:1.3.3"
  compile "io.spray:spray-routing-shapeless2_${scalaBinaryVersion}:1.3.3"
  compile "io.spray:spray-client_${scalaBinaryVersion}:1.3.3"
  compile 'com.yammer.metrics:metrics-core:2.2.0'

  compile('org.joda:joda-convert:1.8.1') {
    exclude(group: 'com.google.guava', module: 'guava')
  }
  compile 'joda-time:joda-time:2.9.4'

  compile "com.typesafe.slick:slick_${scalaBinaryVersion}:2.1.0"
  compile 'com.h2database:h2:1.3.176'
  compile 'commons-pool:commons-pool:1.6'
  compile 'commons-dbcp:commons-dbcp:1.4'
  compile 'org.flywaydb:flyway-core:3.2.1'
  compile 'org.apache.shiro:shiro-core:1.2.6'

  if (isJDK8) {
    compile 'com.typesafe:config:1.3.0'
  } else {
    compile 'com.typesafe:config:1.2.1'
  }

  testCompile "${scalaTest}:scalatest_${scalaBinaryVersion}:${scalatestVersion}"
  testCompile "com.typesafe.akka:akka-testkit_${scalaBinaryVersion}:2.3.15"
  testCompile "io.spray:spray-testkit_${scalaBinaryVersion}:1.3.3"

  testRuntime "org.pegdown:pegdown:${pegdownVersion}"
}

sourceSets.main.scala.srcDirs = ['akka-app/src', 'job-server-api/src', 'job-server/src',
                                 'job-server-extras/src']
sourceSets.test.scala.srcDirs = ['akka-app/test', 'job-server/test',
                                 'job-server-extras/test', 'job-server-tests/src' ]
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []

sourceSets.main.resources.srcDirs = ['job-server/resources']
sourceSets.test.resources.srcDirs = ['job-server/test-resources']

task packageScalaDocs(type: Jar, dependsOn: scaladoc) {
  classifier = 'javadoc'
  from scaladoc
}
if (rootProject.hasProperty('enablePublish')) {
  artifacts {
    archives packageScalaDocs, packageSources
  }
}
