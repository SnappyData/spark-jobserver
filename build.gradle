apply plugin: 'scala'

version = '1.6.0-SNAPSHOT'

ext {
  sparkVersion = '1.6.0'
  nettyGroup = 'io.netty'
  scalaMacros = 'org.scalamacros'
  scalaTest = 'org.scalatest'
  if (rootProject.name == 'spark-jobserver') {
    subprojectBase = ':'
  } else {
    subprojectBase = ':spark-jobserver:'
  }
}

dependencies {
  compile 'org.scala-lang:scala-library:' + scalaVersion
  compile 'org.scala-lang:scala-reflect:' + scalaVersion
  compile 'org.scala-lang:scala-compiler:' + scalaVersion

  // always use stock spark so that snappy extensions don't get accidently
  // included here in jobserver code.
  provided("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  provided("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  provided("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  provided("org.apache.spark:spark-hive_${scalaBinaryVersion}:${sparkVersion}") {
    exclude(group: nettyGroup)
    exclude(group: scalaMacros)
    exclude(group: scalaTest)
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }

  // akka-appDeps
  compile "com.typesafe.akka:akka-slf4j_${scalaBinaryVersion}:2.3.4"
  compile "io.spray:spray-json_${scalaBinaryVersion}:1.3.2"
  compile "io.spray:spray-can_${scalaBinaryVersion}:1.3.3"
  compile "io.spray:spray-routing_${scalaBinaryVersion}:1.3.3"
  compile "io.spray:spray-client_${scalaBinaryVersion}:1.3.3"
  compile "com.yammer.metrics:metrics-core:2.2.0"

  compile 'org.joda:joda-convert:1.2'
  compile 'joda-time:joda-time:2.2'

  compile "com.typesafe.slick:slick_${scalaBinaryVersion}:2.1.0"
  compile 'com.h2database:h2:1.3.170'
  compile 'commons-dbcp:commons-dbcp:1.4'
  compile 'ch.qos.logback:logback-classic:1.0.7'
  compile 'org.apache.shiro:shiro-core:1.2.4'

  compile 'com.typesafe:config:1.2.1'

  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:2.2.1"
  testCompile "com.typesafe.akka:akka-testkit_${scalaBinaryVersion}:2.3.4"
  testCompile "io.spray:spray-testkit_${scalaBinaryVersion}:1.3.2"

  testRuntime 'org.pegdown:pegdown:1.1.0'
}

sourceSets.main.scala.srcDirs = ['akka-app/src', 'job-server-api/src', 'job-server/src',
                                 'job-server-extras/src']
sourceSets.test.scala.srcDirs = ['akka-app/test', 'job-server/test',
                                 'job-server-extras/test', 'job-server-tests/src',
                                 'job-server-tests/src/main/java']
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []

sourceSets.main.resources.srcDirs = ['job-server/src/main/resources',
                                     'job-server-api/src/main/resources',
                                     'akka-app/src/main/resources',
                                     'job-server-extras/src/main/resources']
